// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: proto/order.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	OrderRPCHandler_CreateOrder_FullMethodName          = "/proto.OrderRPCHandler/CreateOrder"
	OrderRPCHandler_GetOrder_FullMethodName             = "/proto.OrderRPCHandler/GetOrder"
	OrderRPCHandler_ReturnToCourier_FullMethodName      = "/proto.OrderRPCHandler/ReturnToCourier"
	OrderRPCHandler_ProcessCustomer_FullMethodName      = "/proto.OrderRPCHandler/ProcessCustomer"
	OrderRPCHandler_ListOrders_FullMethodName           = "/proto.OrderRPCHandler/ListOrders"
	OrderRPCHandler_ListReturns_FullMethodName          = "/proto.OrderRPCHandler/ListReturns"
	OrderRPCHandler_OrderHistory_FullMethodName         = "/proto.OrderRPCHandler/OrderHistory"
	OrderRPCHandler_AcceptOrdersFromFile_FullMethodName = "/proto.OrderRPCHandler/AcceptOrdersFromFile"
	OrderRPCHandler_ClearDatabase_FullMethodName        = "/proto.OrderRPCHandler/ClearDatabase"
)

// OrderRPCHandlerClient is the client API for OrderRPCHandler service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Сервис для работы с заказами
type OrderRPCHandlerClient interface {
	// Создание нового заказа
	CreateOrder(ctx context.Context, in *CreateOrderRequest, opts ...grpc.CallOption) (*Order, error)
	// Получение информации о заказе по ID
	GetOrder(ctx context.Context, in *GetOrderRequest, opts ...grpc.CallOption) (*Order, error)
	// Возврат заказа курьеру
	ReturnToCourier(ctx context.Context, in *ReturnToCourierRequest, opts ...grpc.CallOption) (*ReturnToCourierResponse, error)
	// Обработка действий с заказами для указанного клиента
	ProcessCustomer(ctx context.Context, in *ProcessCustomerRequest, opts ...grpc.CallOption) (*ProcessCustomerResponse, error)
	// Получение списка заказов с курсорной пагинацией
	ListOrders(ctx context.Context, in *ListOrdersRequest, opts ...grpc.CallOption) (*ListOrdersResponse, error)
	// Получение списка возвращенных заказов с курсорной пагинацией
	ListReturns(ctx context.Context, in *ListReturnsRequest, opts ...grpc.CallOption) (*ListReturnsResponse, error)
	// Получение истории всех заказов
	OrderHistory(ctx context.Context, in *OrderHistoryRequest, opts ...grpc.CallOption) (*OrderHistoryResponse, error)
	// Загрузка заказов из файла
	AcceptOrdersFromFile(ctx context.Context, in *AcceptOrdersFromFileRequest, opts ...grpc.CallOption) (*AcceptOrdersFromFileResponse, error)
	// Очистка базы данных
	ClearDatabase(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ClearDatabaseResponse, error)
}

type orderRPCHandlerClient struct {
	cc grpc.ClientConnInterface
}

func NewOrderRPCHandlerClient(cc grpc.ClientConnInterface) OrderRPCHandlerClient {
	return &orderRPCHandlerClient{cc}
}

func (c *orderRPCHandlerClient) CreateOrder(ctx context.Context, in *CreateOrderRequest, opts ...grpc.CallOption) (*Order, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Order)
	err := c.cc.Invoke(ctx, OrderRPCHandler_CreateOrder_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderRPCHandlerClient) GetOrder(ctx context.Context, in *GetOrderRequest, opts ...grpc.CallOption) (*Order, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Order)
	err := c.cc.Invoke(ctx, OrderRPCHandler_GetOrder_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderRPCHandlerClient) ReturnToCourier(ctx context.Context, in *ReturnToCourierRequest, opts ...grpc.CallOption) (*ReturnToCourierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReturnToCourierResponse)
	err := c.cc.Invoke(ctx, OrderRPCHandler_ReturnToCourier_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderRPCHandlerClient) ProcessCustomer(ctx context.Context, in *ProcessCustomerRequest, opts ...grpc.CallOption) (*ProcessCustomerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProcessCustomerResponse)
	err := c.cc.Invoke(ctx, OrderRPCHandler_ProcessCustomer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderRPCHandlerClient) ListOrders(ctx context.Context, in *ListOrdersRequest, opts ...grpc.CallOption) (*ListOrdersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListOrdersResponse)
	err := c.cc.Invoke(ctx, OrderRPCHandler_ListOrders_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderRPCHandlerClient) ListReturns(ctx context.Context, in *ListReturnsRequest, opts ...grpc.CallOption) (*ListReturnsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListReturnsResponse)
	err := c.cc.Invoke(ctx, OrderRPCHandler_ListReturns_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderRPCHandlerClient) OrderHistory(ctx context.Context, in *OrderHistoryRequest, opts ...grpc.CallOption) (*OrderHistoryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OrderHistoryResponse)
	err := c.cc.Invoke(ctx, OrderRPCHandler_OrderHistory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderRPCHandlerClient) AcceptOrdersFromFile(ctx context.Context, in *AcceptOrdersFromFileRequest, opts ...grpc.CallOption) (*AcceptOrdersFromFileResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AcceptOrdersFromFileResponse)
	err := c.cc.Invoke(ctx, OrderRPCHandler_AcceptOrdersFromFile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderRPCHandlerClient) ClearDatabase(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ClearDatabaseResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ClearDatabaseResponse)
	err := c.cc.Invoke(ctx, OrderRPCHandler_ClearDatabase_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OrderRPCHandlerServer is the server API for OrderRPCHandler service.
// All implementations must embed UnimplementedOrderRPCHandlerServer
// for forward compatibility.
//
// Сервис для работы с заказами
type OrderRPCHandlerServer interface {
	// Создание нового заказа
	CreateOrder(context.Context, *CreateOrderRequest) (*Order, error)
	// Получение информации о заказе по ID
	GetOrder(context.Context, *GetOrderRequest) (*Order, error)
	// Возврат заказа курьеру
	ReturnToCourier(context.Context, *ReturnToCourierRequest) (*ReturnToCourierResponse, error)
	// Обработка действий с заказами для указанного клиента
	ProcessCustomer(context.Context, *ProcessCustomerRequest) (*ProcessCustomerResponse, error)
	// Получение списка заказов с курсорной пагинацией
	ListOrders(context.Context, *ListOrdersRequest) (*ListOrdersResponse, error)
	// Получение списка возвращенных заказов с курсорной пагинацией
	ListReturns(context.Context, *ListReturnsRequest) (*ListReturnsResponse, error)
	// Получение истории всех заказов
	OrderHistory(context.Context, *OrderHistoryRequest) (*OrderHistoryResponse, error)
	// Загрузка заказов из файла
	AcceptOrdersFromFile(context.Context, *AcceptOrdersFromFileRequest) (*AcceptOrdersFromFileResponse, error)
	// Очистка базы данных
	ClearDatabase(context.Context, *emptypb.Empty) (*ClearDatabaseResponse, error)
	mustEmbedUnimplementedOrderRPCHandlerServer()
}

// UnimplementedOrderRPCHandlerServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedOrderRPCHandlerServer struct{}

func (UnimplementedOrderRPCHandlerServer) CreateOrder(context.Context, *CreateOrderRequest) (*Order, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrder not implemented")
}
func (UnimplementedOrderRPCHandlerServer) GetOrder(context.Context, *GetOrderRequest) (*Order, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrder not implemented")
}
func (UnimplementedOrderRPCHandlerServer) ReturnToCourier(context.Context, *ReturnToCourierRequest) (*ReturnToCourierResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReturnToCourier not implemented")
}
func (UnimplementedOrderRPCHandlerServer) ProcessCustomer(context.Context, *ProcessCustomerRequest) (*ProcessCustomerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProcessCustomer not implemented")
}
func (UnimplementedOrderRPCHandlerServer) ListOrders(context.Context, *ListOrdersRequest) (*ListOrdersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOrders not implemented")
}
func (UnimplementedOrderRPCHandlerServer) ListReturns(context.Context, *ListReturnsRequest) (*ListReturnsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListReturns not implemented")
}
func (UnimplementedOrderRPCHandlerServer) OrderHistory(context.Context, *OrderHistoryRequest) (*OrderHistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OrderHistory not implemented")
}
func (UnimplementedOrderRPCHandlerServer) AcceptOrdersFromFile(context.Context, *AcceptOrdersFromFileRequest) (*AcceptOrdersFromFileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AcceptOrdersFromFile not implemented")
}
func (UnimplementedOrderRPCHandlerServer) ClearDatabase(context.Context, *emptypb.Empty) (*ClearDatabaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClearDatabase not implemented")
}
func (UnimplementedOrderRPCHandlerServer) mustEmbedUnimplementedOrderRPCHandlerServer() {}
func (UnimplementedOrderRPCHandlerServer) testEmbeddedByValue()                         {}

// UnsafeOrderRPCHandlerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OrderRPCHandlerServer will
// result in compilation errors.
type UnsafeOrderRPCHandlerServer interface {
	mustEmbedUnimplementedOrderRPCHandlerServer()
}

func RegisterOrderRPCHandlerServer(s grpc.ServiceRegistrar, srv OrderRPCHandlerServer) {
	// If the following call pancis, it indicates UnimplementedOrderRPCHandlerServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&OrderRPCHandler_ServiceDesc, srv)
}

func _OrderRPCHandler_CreateOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderRPCHandlerServer).CreateOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderRPCHandler_CreateOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderRPCHandlerServer).CreateOrder(ctx, req.(*CreateOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderRPCHandler_GetOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderRPCHandlerServer).GetOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderRPCHandler_GetOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderRPCHandlerServer).GetOrder(ctx, req.(*GetOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderRPCHandler_ReturnToCourier_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReturnToCourierRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderRPCHandlerServer).ReturnToCourier(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderRPCHandler_ReturnToCourier_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderRPCHandlerServer).ReturnToCourier(ctx, req.(*ReturnToCourierRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderRPCHandler_ProcessCustomer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProcessCustomerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderRPCHandlerServer).ProcessCustomer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderRPCHandler_ProcessCustomer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderRPCHandlerServer).ProcessCustomer(ctx, req.(*ProcessCustomerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderRPCHandler_ListOrders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListOrdersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderRPCHandlerServer).ListOrders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderRPCHandler_ListOrders_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderRPCHandlerServer).ListOrders(ctx, req.(*ListOrdersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderRPCHandler_ListReturns_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListReturnsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderRPCHandlerServer).ListReturns(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderRPCHandler_ListReturns_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderRPCHandlerServer).ListReturns(ctx, req.(*ListReturnsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderRPCHandler_OrderHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderRPCHandlerServer).OrderHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderRPCHandler_OrderHistory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderRPCHandlerServer).OrderHistory(ctx, req.(*OrderHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderRPCHandler_AcceptOrdersFromFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AcceptOrdersFromFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderRPCHandlerServer).AcceptOrdersFromFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderRPCHandler_AcceptOrdersFromFile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderRPCHandlerServer).AcceptOrdersFromFile(ctx, req.(*AcceptOrdersFromFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderRPCHandler_ClearDatabase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderRPCHandlerServer).ClearDatabase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderRPCHandler_ClearDatabase_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderRPCHandlerServer).ClearDatabase(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// OrderRPCHandler_ServiceDesc is the grpc.ServiceDesc for OrderRPCHandler service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OrderRPCHandler_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.OrderRPCHandler",
	HandlerType: (*OrderRPCHandlerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateOrder",
			Handler:    _OrderRPCHandler_CreateOrder_Handler,
		},
		{
			MethodName: "GetOrder",
			Handler:    _OrderRPCHandler_GetOrder_Handler,
		},
		{
			MethodName: "ReturnToCourier",
			Handler:    _OrderRPCHandler_ReturnToCourier_Handler,
		},
		{
			MethodName: "ProcessCustomer",
			Handler:    _OrderRPCHandler_ProcessCustomer_Handler,
		},
		{
			MethodName: "ListOrders",
			Handler:    _OrderRPCHandler_ListOrders_Handler,
		},
		{
			MethodName: "ListReturns",
			Handler:    _OrderRPCHandler_ListReturns_Handler,
		},
		{
			MethodName: "OrderHistory",
			Handler:    _OrderRPCHandler_OrderHistory_Handler,
		},
		{
			MethodName: "AcceptOrdersFromFile",
			Handler:    _OrderRPCHandler_AcceptOrdersFromFile_Handler,
		},
		{
			MethodName: "ClearDatabase",
			Handler:    _OrderRPCHandler_ClearDatabase_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/order.proto",
}
