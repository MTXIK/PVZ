// Code generated by MockGen. DO NOT EDIT.
// Source: order.go
//
// Generated by this command:
//
//	mockgen -typed -source=order.go -destination=mock_order_test.go -package=handler
//

// Package handler is a generated GoMock package.
package handler

import (
	context "context"
	reflect "reflect"
	time "time"

	model "gitlab.ozon.dev/gojhw1/pkg/model"
	gomock "go.uber.org/mock/gomock"
)

// MockorderServiceInterface is a mock of orderServiceInterface interface.
type MockorderServiceInterface struct {
	ctrl     *gomock.Controller
	recorder *MockorderServiceInterfaceMockRecorder
	isgomock struct{}
}

// MockorderServiceInterfaceMockRecorder is the mock recorder for MockorderServiceInterface.
type MockorderServiceInterfaceMockRecorder struct {
	mock *MockorderServiceInterface
}

// NewMockorderServiceInterface creates a new mock instance.
func NewMockorderServiceInterface(ctrl *gomock.Controller) *MockorderServiceInterface {
	mock := &MockorderServiceInterface{ctrl: ctrl}
	mock.recorder = &MockorderServiceInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockorderServiceInterface) EXPECT() *MockorderServiceInterfaceMockRecorder {
	return m.recorder
}

// AcceptOrder mocks base method.
func (m *MockorderServiceInterface) AcceptOrder(ctx context.Context, id, customerID int64, deadline time.Time, weight, cost float64, packageType *model.PackageType, wrapper *model.WrapperType) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AcceptOrder", ctx, id, customerID, deadline, weight, cost, packageType, wrapper)
	ret0, _ := ret[0].(error)
	return ret0
}

// AcceptOrder indicates an expected call of AcceptOrder.
func (mr *MockorderServiceInterfaceMockRecorder) AcceptOrder(ctx, id, customerID, deadline, weight, cost, packageType, wrapper any) *MockorderServiceInterfaceAcceptOrderCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AcceptOrder", reflect.TypeOf((*MockorderServiceInterface)(nil).AcceptOrder), ctx, id, customerID, deadline, weight, cost, packageType, wrapper)
	return &MockorderServiceInterfaceAcceptOrderCall{Call: call}
}

// MockorderServiceInterfaceAcceptOrderCall wrap *gomock.Call
type MockorderServiceInterfaceAcceptOrderCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockorderServiceInterfaceAcceptOrderCall) Return(arg0 error) *MockorderServiceInterfaceAcceptOrderCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockorderServiceInterfaceAcceptOrderCall) Do(f func(context.Context, int64, int64, time.Time, float64, float64, *model.PackageType, *model.WrapperType) error) *MockorderServiceInterfaceAcceptOrderCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockorderServiceInterfaceAcceptOrderCall) DoAndReturn(f func(context.Context, int64, int64, time.Time, float64, float64, *model.PackageType, *model.WrapperType) error) *MockorderServiceInterfaceAcceptOrderCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// AcceptOrdersFromFile mocks base method.
func (m *MockorderServiceInterface) AcceptOrdersFromFile(ctx context.Context, filename string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AcceptOrdersFromFile", ctx, filename)
	ret0, _ := ret[0].(error)
	return ret0
}

// AcceptOrdersFromFile indicates an expected call of AcceptOrdersFromFile.
func (mr *MockorderServiceInterfaceMockRecorder) AcceptOrdersFromFile(ctx, filename any) *MockorderServiceInterfaceAcceptOrdersFromFileCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AcceptOrdersFromFile", reflect.TypeOf((*MockorderServiceInterface)(nil).AcceptOrdersFromFile), ctx, filename)
	return &MockorderServiceInterfaceAcceptOrdersFromFileCall{Call: call}
}

// MockorderServiceInterfaceAcceptOrdersFromFileCall wrap *gomock.Call
type MockorderServiceInterfaceAcceptOrdersFromFileCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockorderServiceInterfaceAcceptOrdersFromFileCall) Return(arg0 error) *MockorderServiceInterfaceAcceptOrdersFromFileCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockorderServiceInterfaceAcceptOrdersFromFileCall) Do(f func(context.Context, string) error) *MockorderServiceInterfaceAcceptOrdersFromFileCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockorderServiceInterfaceAcceptOrdersFromFileCall) DoAndReturn(f func(context.Context, string) error) *MockorderServiceInterfaceAcceptOrdersFromFileCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ClearDatabase mocks base method.
func (m *MockorderServiceInterface) ClearDatabase(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClearDatabase", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// ClearDatabase indicates an expected call of ClearDatabase.
func (mr *MockorderServiceInterfaceMockRecorder) ClearDatabase(ctx any) *MockorderServiceInterfaceClearDatabaseCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClearDatabase", reflect.TypeOf((*MockorderServiceInterface)(nil).ClearDatabase), ctx)
	return &MockorderServiceInterfaceClearDatabaseCall{Call: call}
}

// MockorderServiceInterfaceClearDatabaseCall wrap *gomock.Call
type MockorderServiceInterfaceClearDatabaseCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockorderServiceInterfaceClearDatabaseCall) Return(arg0 error) *MockorderServiceInterfaceClearDatabaseCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockorderServiceInterfaceClearDatabaseCall) Do(f func(context.Context) error) *MockorderServiceInterfaceClearDatabaseCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockorderServiceInterfaceClearDatabaseCall) DoAndReturn(f func(context.Context) error) *MockorderServiceInterfaceClearDatabaseCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DeliverOrder mocks base method.
func (m *MockorderServiceInterface) DeliverOrder(ctx context.Context, id, customerID int64, now time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeliverOrder", ctx, id, customerID, now)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeliverOrder indicates an expected call of DeliverOrder.
func (mr *MockorderServiceInterfaceMockRecorder) DeliverOrder(ctx, id, customerID, now any) *MockorderServiceInterfaceDeliverOrderCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeliverOrder", reflect.TypeOf((*MockorderServiceInterface)(nil).DeliverOrder), ctx, id, customerID, now)
	return &MockorderServiceInterfaceDeliverOrderCall{Call: call}
}

// MockorderServiceInterfaceDeliverOrderCall wrap *gomock.Call
type MockorderServiceInterfaceDeliverOrderCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockorderServiceInterfaceDeliverOrderCall) Return(arg0 error) *MockorderServiceInterfaceDeliverOrderCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockorderServiceInterfaceDeliverOrderCall) Do(f func(context.Context, int64, int64, time.Time) error) *MockorderServiceInterfaceDeliverOrderCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockorderServiceInterfaceDeliverOrderCall) DoAndReturn(f func(context.Context, int64, int64, time.Time) error) *MockorderServiceInterfaceDeliverOrderCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetOrderByID mocks base method.
func (m *MockorderServiceInterface) GetOrderByID(ctx context.Context, id int64) (model.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrderByID", ctx, id)
	ret0, _ := ret[0].(model.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrderByID indicates an expected call of GetOrderByID.
func (mr *MockorderServiceInterfaceMockRecorder) GetOrderByID(ctx, id any) *MockorderServiceInterfaceGetOrderByIDCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrderByID", reflect.TypeOf((*MockorderServiceInterface)(nil).GetOrderByID), ctx, id)
	return &MockorderServiceInterfaceGetOrderByIDCall{Call: call}
}

// MockorderServiceInterfaceGetOrderByIDCall wrap *gomock.Call
type MockorderServiceInterfaceGetOrderByIDCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockorderServiceInterfaceGetOrderByIDCall) Return(arg0 model.Order, arg1 error) *MockorderServiceInterfaceGetOrderByIDCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockorderServiceInterfaceGetOrderByIDCall) Do(f func(context.Context, int64) (model.Order, error)) *MockorderServiceInterfaceGetOrderByIDCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockorderServiceInterfaceGetOrderByIDCall) DoAndReturn(f func(context.Context, int64) (model.Order, error)) *MockorderServiceInterfaceGetOrderByIDCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ListOrdersWithCursor mocks base method.
func (m *MockorderServiceInterface) ListOrdersWithCursor(ctx context.Context, cursorID int64, limit int, customerID int64, filterPVZ bool, searchTerm string) ([]model.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListOrdersWithCursor", ctx, cursorID, limit, customerID, filterPVZ, searchTerm)
	ret0, _ := ret[0].([]model.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListOrdersWithCursor indicates an expected call of ListOrdersWithCursor.
func (mr *MockorderServiceInterfaceMockRecorder) ListOrdersWithCursor(ctx, cursorID, limit, customerID, filterPVZ, searchTerm any) *MockorderServiceInterfaceListOrdersWithCursorCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListOrdersWithCursor", reflect.TypeOf((*MockorderServiceInterface)(nil).ListOrdersWithCursor), ctx, cursorID, limit, customerID, filterPVZ, searchTerm)
	return &MockorderServiceInterfaceListOrdersWithCursorCall{Call: call}
}

// MockorderServiceInterfaceListOrdersWithCursorCall wrap *gomock.Call
type MockorderServiceInterfaceListOrdersWithCursorCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockorderServiceInterfaceListOrdersWithCursorCall) Return(arg0 []model.Order, arg1 error) *MockorderServiceInterfaceListOrdersWithCursorCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockorderServiceInterfaceListOrdersWithCursorCall) Do(f func(context.Context, int64, int, int64, bool, string) ([]model.Order, error)) *MockorderServiceInterfaceListOrdersWithCursorCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockorderServiceInterfaceListOrdersWithCursorCall) DoAndReturn(f func(context.Context, int64, int, int64, bool, string) ([]model.Order, error)) *MockorderServiceInterfaceListOrdersWithCursorCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ListReturnsWithCursor mocks base method.
func (m *MockorderServiceInterface) ListReturnsWithCursor(ctx context.Context, cursorID int64, limit int, searchTerm string) ([]model.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListReturnsWithCursor", ctx, cursorID, limit, searchTerm)
	ret0, _ := ret[0].([]model.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListReturnsWithCursor indicates an expected call of ListReturnsWithCursor.
func (mr *MockorderServiceInterfaceMockRecorder) ListReturnsWithCursor(ctx, cursorID, limit, searchTerm any) *MockorderServiceInterfaceListReturnsWithCursorCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListReturnsWithCursor", reflect.TypeOf((*MockorderServiceInterface)(nil).ListReturnsWithCursor), ctx, cursorID, limit, searchTerm)
	return &MockorderServiceInterfaceListReturnsWithCursorCall{Call: call}
}

// MockorderServiceInterfaceListReturnsWithCursorCall wrap *gomock.Call
type MockorderServiceInterfaceListReturnsWithCursorCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockorderServiceInterfaceListReturnsWithCursorCall) Return(arg0 []model.Order, arg1 error) *MockorderServiceInterfaceListReturnsWithCursorCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockorderServiceInterfaceListReturnsWithCursorCall) Do(f func(context.Context, int64, int, string) ([]model.Order, error)) *MockorderServiceInterfaceListReturnsWithCursorCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockorderServiceInterfaceListReturnsWithCursorCall) DoAndReturn(f func(context.Context, int64, int, string) ([]model.Order, error)) *MockorderServiceInterfaceListReturnsWithCursorCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// OrderHistory mocks base method.
func (m *MockorderServiceInterface) OrderHistory(ctx context.Context, searchTerm string) ([]model.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OrderHistory", ctx, searchTerm)
	ret0, _ := ret[0].([]model.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OrderHistory indicates an expected call of OrderHistory.
func (mr *MockorderServiceInterfaceMockRecorder) OrderHistory(ctx, searchTerm any) *MockorderServiceInterfaceOrderHistoryCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OrderHistory", reflect.TypeOf((*MockorderServiceInterface)(nil).OrderHistory), ctx, searchTerm)
	return &MockorderServiceInterfaceOrderHistoryCall{Call: call}
}

// MockorderServiceInterfaceOrderHistoryCall wrap *gomock.Call
type MockorderServiceInterfaceOrderHistoryCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockorderServiceInterfaceOrderHistoryCall) Return(arg0 []model.Order, arg1 error) *MockorderServiceInterfaceOrderHistoryCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockorderServiceInterfaceOrderHistoryCall) Do(f func(context.Context, string) ([]model.Order, error)) *MockorderServiceInterfaceOrderHistoryCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockorderServiceInterfaceOrderHistoryCall) DoAndReturn(f func(context.Context, string) ([]model.Order, error)) *MockorderServiceInterfaceOrderHistoryCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ProcessReturnOrder mocks base method.
func (m *MockorderServiceInterface) ProcessReturnOrder(ctx context.Context, id, customerID int64, now time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProcessReturnOrder", ctx, id, customerID, now)
	ret0, _ := ret[0].(error)
	return ret0
}

// ProcessReturnOrder indicates an expected call of ProcessReturnOrder.
func (mr *MockorderServiceInterfaceMockRecorder) ProcessReturnOrder(ctx, id, customerID, now any) *MockorderServiceInterfaceProcessReturnOrderCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessReturnOrder", reflect.TypeOf((*MockorderServiceInterface)(nil).ProcessReturnOrder), ctx, id, customerID, now)
	return &MockorderServiceInterfaceProcessReturnOrderCall{Call: call}
}

// MockorderServiceInterfaceProcessReturnOrderCall wrap *gomock.Call
type MockorderServiceInterfaceProcessReturnOrderCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockorderServiceInterfaceProcessReturnOrderCall) Return(arg0 error) *MockorderServiceInterfaceProcessReturnOrderCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockorderServiceInterfaceProcessReturnOrderCall) Do(f func(context.Context, int64, int64, time.Time) error) *MockorderServiceInterfaceProcessReturnOrderCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockorderServiceInterfaceProcessReturnOrderCall) DoAndReturn(f func(context.Context, int64, int64, time.Time) error) *MockorderServiceInterfaceProcessReturnOrderCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ReturnOrderToCourier mocks base method.
func (m *MockorderServiceInterface) ReturnOrderToCourier(ctx context.Context, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReturnOrderToCourier", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReturnOrderToCourier indicates an expected call of ReturnOrderToCourier.
func (mr *MockorderServiceInterfaceMockRecorder) ReturnOrderToCourier(ctx, id any) *MockorderServiceInterfaceReturnOrderToCourierCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReturnOrderToCourier", reflect.TypeOf((*MockorderServiceInterface)(nil).ReturnOrderToCourier), ctx, id)
	return &MockorderServiceInterfaceReturnOrderToCourierCall{Call: call}
}

// MockorderServiceInterfaceReturnOrderToCourierCall wrap *gomock.Call
type MockorderServiceInterfaceReturnOrderToCourierCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockorderServiceInterfaceReturnOrderToCourierCall) Return(arg0 error) *MockorderServiceInterfaceReturnOrderToCourierCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockorderServiceInterfaceReturnOrderToCourierCall) Do(f func(context.Context, int64) error) *MockorderServiceInterfaceReturnOrderToCourierCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockorderServiceInterfaceReturnOrderToCourierCall) DoAndReturn(f func(context.Context, int64) error) *MockorderServiceInterfaceReturnOrderToCourierCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
