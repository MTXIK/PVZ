// Code generated by MockGen. DO NOT EDIT.
// Source: user.go
//
// Generated by this command:
//
//	mockgen -typed -source=user.go -destination=mock_user_test.go -package=handler
//

// Package handler is a generated GoMock package.
package handler

import (
	context "context"
	reflect "reflect"

	model "gitlab.ozon.dev/gojhw1/pkg/model"
	gomock "go.uber.org/mock/gomock"
)

// MockuserRepository is a mock of userRepository interface.
type MockuserRepository struct {
	ctrl     *gomock.Controller
	recorder *MockuserRepositoryMockRecorder
	isgomock struct{}
}

// MockuserRepositoryMockRecorder is the mock recorder for MockuserRepository.
type MockuserRepositoryMockRecorder struct {
	mock *MockuserRepository
}

// NewMockuserRepository creates a new mock instance.
func NewMockuserRepository(ctrl *gomock.Controller) *MockuserRepository {
	mock := &MockuserRepository{ctrl: ctrl}
	mock.recorder = &MockuserRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockuserRepository) EXPECT() *MockuserRepositoryMockRecorder {
	return m.recorder
}

// CheckPassword mocks base method.
func (m *MockuserRepository) CheckPassword(ctx context.Context, username, password string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckPassword", ctx, username, password)
	ret0, _ := ret[0].(bool)
	return ret0
}

// CheckPassword indicates an expected call of CheckPassword.
func (mr *MockuserRepositoryMockRecorder) CheckPassword(ctx, username, password any) *MockuserRepositoryCheckPasswordCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckPassword", reflect.TypeOf((*MockuserRepository)(nil).CheckPassword), ctx, username, password)
	return &MockuserRepositoryCheckPasswordCall{Call: call}
}

// MockuserRepositoryCheckPasswordCall wrap *gomock.Call
type MockuserRepositoryCheckPasswordCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockuserRepositoryCheckPasswordCall) Return(arg0 bool) *MockuserRepositoryCheckPasswordCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockuserRepositoryCheckPasswordCall) Do(f func(context.Context, string, string) bool) *MockuserRepositoryCheckPasswordCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockuserRepositoryCheckPasswordCall) DoAndReturn(f func(context.Context, string, string) bool) *MockuserRepositoryCheckPasswordCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Create mocks base method.
func (m *MockuserRepository) Create(ctx context.Context, user model.User, plainPassword string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, user, plainPassword)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockuserRepositoryMockRecorder) Create(ctx, user, plainPassword any) *MockuserRepositoryCreateCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockuserRepository)(nil).Create), ctx, user, plainPassword)
	return &MockuserRepositoryCreateCall{Call: call}
}

// MockuserRepositoryCreateCall wrap *gomock.Call
type MockuserRepositoryCreateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockuserRepositoryCreateCall) Return(arg0 error) *MockuserRepositoryCreateCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockuserRepositoryCreateCall) Do(f func(context.Context, model.User, string) error) *MockuserRepositoryCreateCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockuserRepositoryCreateCall) DoAndReturn(f func(context.Context, model.User, string) error) *MockuserRepositoryCreateCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Delete mocks base method.
func (m *MockuserRepository) Delete(ctx context.Context, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockuserRepositoryMockRecorder) Delete(ctx, id any) *MockuserRepositoryDeleteCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockuserRepository)(nil).Delete), ctx, id)
	return &MockuserRepositoryDeleteCall{Call: call}
}

// MockuserRepositoryDeleteCall wrap *gomock.Call
type MockuserRepositoryDeleteCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockuserRepositoryDeleteCall) Return(arg0 error) *MockuserRepositoryDeleteCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockuserRepositoryDeleteCall) Do(f func(context.Context, int64) error) *MockuserRepositoryDeleteCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockuserRepositoryDeleteCall) DoAndReturn(f func(context.Context, int64) error) *MockuserRepositoryDeleteCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetByID mocks base method.
func (m *MockuserRepository) GetByID(ctx context.Context, id int64) (model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, id)
	ret0, _ := ret[0].(model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockuserRepositoryMockRecorder) GetByID(ctx, id any) *MockuserRepositoryGetByIDCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockuserRepository)(nil).GetByID), ctx, id)
	return &MockuserRepositoryGetByIDCall{Call: call}
}

// MockuserRepositoryGetByIDCall wrap *gomock.Call
type MockuserRepositoryGetByIDCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockuserRepositoryGetByIDCall) Return(arg0 model.User, arg1 error) *MockuserRepositoryGetByIDCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockuserRepositoryGetByIDCall) Do(f func(context.Context, int64) (model.User, error)) *MockuserRepositoryGetByIDCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockuserRepositoryGetByIDCall) DoAndReturn(f func(context.Context, int64) (model.User, error)) *MockuserRepositoryGetByIDCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetByUsername mocks base method.
func (m *MockuserRepository) GetByUsername(ctx context.Context, username string) (model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByUsername", ctx, username)
	ret0, _ := ret[0].(model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByUsername indicates an expected call of GetByUsername.
func (mr *MockuserRepositoryMockRecorder) GetByUsername(ctx, username any) *MockuserRepositoryGetByUsernameCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByUsername", reflect.TypeOf((*MockuserRepository)(nil).GetByUsername), ctx, username)
	return &MockuserRepositoryGetByUsernameCall{Call: call}
}

// MockuserRepositoryGetByUsernameCall wrap *gomock.Call
type MockuserRepositoryGetByUsernameCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockuserRepositoryGetByUsernameCall) Return(arg0 model.User, arg1 error) *MockuserRepositoryGetByUsernameCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockuserRepositoryGetByUsernameCall) Do(f func(context.Context, string) (model.User, error)) *MockuserRepositoryGetByUsernameCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockuserRepositoryGetByUsernameCall) DoAndReturn(f func(context.Context, string) (model.User, error)) *MockuserRepositoryGetByUsernameCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// List mocks base method.
func (m *MockuserRepository) List(ctx context.Context, searchTerm string) ([]model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, searchTerm)
	ret0, _ := ret[0].([]model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockuserRepositoryMockRecorder) List(ctx, searchTerm any) *MockuserRepositoryListCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockuserRepository)(nil).List), ctx, searchTerm)
	return &MockuserRepositoryListCall{Call: call}
}

// MockuserRepositoryListCall wrap *gomock.Call
type MockuserRepositoryListCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockuserRepositoryListCall) Return(arg0 []model.User, arg1 error) *MockuserRepositoryListCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockuserRepositoryListCall) Do(f func(context.Context, string) ([]model.User, error)) *MockuserRepositoryListCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockuserRepositoryListCall) DoAndReturn(f func(context.Context, string) ([]model.User, error)) *MockuserRepositoryListCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Update mocks base method.
func (m *MockuserRepository) Update(ctx context.Context, user model.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockuserRepositoryMockRecorder) Update(ctx, user any) *MockuserRepositoryUpdateCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockuserRepository)(nil).Update), ctx, user)
	return &MockuserRepositoryUpdateCall{Call: call}
}

// MockuserRepositoryUpdateCall wrap *gomock.Call
type MockuserRepositoryUpdateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockuserRepositoryUpdateCall) Return(arg0 error) *MockuserRepositoryUpdateCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockuserRepositoryUpdateCall) Do(f func(context.Context, model.User) error) *MockuserRepositoryUpdateCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockuserRepositoryUpdateCall) DoAndReturn(f func(context.Context, model.User) error) *MockuserRepositoryUpdateCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpdatePassword mocks base method.
func (m *MockuserRepository) UpdatePassword(ctx context.Context, userID int64, newPassword string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePassword", ctx, userID, newPassword)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePassword indicates an expected call of UpdatePassword.
func (mr *MockuserRepositoryMockRecorder) UpdatePassword(ctx, userID, newPassword any) *MockuserRepositoryUpdatePasswordCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePassword", reflect.TypeOf((*MockuserRepository)(nil).UpdatePassword), ctx, userID, newPassword)
	return &MockuserRepositoryUpdatePasswordCall{Call: call}
}

// MockuserRepositoryUpdatePasswordCall wrap *gomock.Call
type MockuserRepositoryUpdatePasswordCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockuserRepositoryUpdatePasswordCall) Return(arg0 error) *MockuserRepositoryUpdatePasswordCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockuserRepositoryUpdatePasswordCall) Do(f func(context.Context, int64, string) error) *MockuserRepositoryUpdatePasswordCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockuserRepositoryUpdatePasswordCall) DoAndReturn(f func(context.Context, int64, string) error) *MockuserRepositoryUpdatePasswordCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
